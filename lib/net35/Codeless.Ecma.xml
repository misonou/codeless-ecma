<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codeless.Ecma</name>
    </assembly>
    <members>
        <member name="T:Codeless.Ecma.EcmaRegExp">
            <summary>
            Represents a ECMAScript-like regular expression object.
            </summary>
        </member>
        <member name="P:Codeless.Ecma.EcmaRegExp.Global">
            <summary>
            Indicates that the regular expression should be tested against all possible matches in a string.
            </summary>
        </member>
        <member name="P:Codeless.Ecma.EcmaRegExp.Multiline">
            <summary>
            Indicates that a multiline input string should be treated as multiple lines. 
            In such case "^" and "$" change from matching at only the start or end of the entire string to the start or end of any line within the string.
            </summary>
        </member>
        <member name="P:Codeless.Ecma.EcmaRegExp.IgnoreCase">
            <summary>
            Indicates that case should be ignored while attempting a match in a string.
            </summary>
        </member>
        <member name="M:Codeless.Ecma.EcmaRegExp.Test(System.String)">
            <summary>
            Tests whether there is any occurences in the specified string that matches the pattern.
            </summary>
            <param name="input">A string to test against.</param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Ecma.EcmaRegExp.Replace(System.String,Codeless.Ecma.Runtime.RuntimeFunction)">
            <summary>
            Replaces occurences of substrings that matches the pattern by the value returned from the invocation of pipe function argument.
            </summary>
            <param name="input">Input string.</param>
            <param name="replacement">A pipe function argument.</param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Ecma.EcmaRegExp.Replace(System.String,Codeless.Ecma.EcmaRegExpReplaceCallback)">
            <summary>
            Replaces occurences of substrings that matches the pattern by the value returned from the invocation of native method.
            </summary>
            <param name="input">Input string.</param>
            <param name="replacement">A delegate escapulating a method that returns replacement string for the specifc occurence.</param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Ecma.EcmaRegExp.Replace(System.String,System.String)">
            <summary>
            Replaces occurences of substrings that matches the pattern by the specified replacement.
            </summary>
            <param name="input">Input string.</param>
            <param name="replacement">Replacement string.</param>
            <returns></returns>
        </member>
        <member name="M:Codeless.Ecma.EcmaRegExp.Parse(System.String,System.String)">
            <summary>
            Parses the given string into an instance of the <see cref="T:Codeless.Ecma.EcmaRegExp"/> class if the string represents a valid ECMAScript-compatible regular expression.
            </summary>
            <param name="pattern">A string representing a valid ECMAScript-compatible regular expression.</param>
            <param name="flags">A string representing valid regular expression flags.</param>
            <returns>Returns *true* if the given string represents a valid ECMAScript-compatible regular expression; or *false* otherwise.</returns>
        </member>
        <member name="T:Codeless.Ecma.EcmaValue">
            <summary>
            Represents a dynamic value in pipe executions to mimic behaviors to values in ECMAScript.
            </summary>
        </member>
        <member name="F:Codeless.Ecma.EcmaValue.Undefined">
            <summary>
            Represents an undefined value. It is similar to *undefined* in ECMAScript which could be returned when accessing an undefined property.
            </summary>
        </member>
        <member name="P:Codeless.Ecma.EcmaValue.Item(Codeless.Ecma.EcmaPropertyKey)">
            <summary>
            Gets value of the specified property from the object.
            </summary>
            <param name="index">Property name.</param>
            <returns>Value associated with the property name, -or- <see cref="F:Codeless.Ecma.EcmaValue.Undefined"/> if property does not exist.</returns>
        </member>
        <member name="P:Codeless.Ecma.EcmaValue.Type">
            <summary>
            Gets the type of value represented by the <see cref="T:Codeless.Ecma.EcmaValue"/> instance.
            </summary>
        </member>
    </members>
</doc>
